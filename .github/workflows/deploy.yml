name: SAST + Deploy Frontend & Backend

on:
  push:
    branches: [master]
  pull_request:
  workflow_dispatch:

jobs:
  # --- SAST job (CodeQL + Semgrep) ---
  sast:
    name: SAST (CodeQL + Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write # required to upload SARIF
      actions: read
    steps:
      - uses: actions/checkout@v4

      # --- CodeQL (JavaScript/TypeScript) ---
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-and-quality

      # For JS/TS, autobuild is fine (no compile step needed)
      - name: CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: CodeQL Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "monorepo-js"

      # --- Semgrep OSS (extra coverage, fast) ---
      - name: Semgrep Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: |
            p/ci
            p/javascript
          generateSarif: true
          sarif: semgrep.sarif
        # Gate on high-severity findings (optional): uncomment to fail build on High+
        # env:
        #   SEMGREP_RULES: p/ci
        #   SEMGREP_TIMEOUT: "600"
        #   SEMGREP_ENABLE_PATCH: "true"
        #   SEMGREP_ERROR: "true"

      - name: Upload Semgrep SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # Detect which part changed
  changes:
    runs-on: ubuntu-latest
    needs: sast
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            client:
              - 'client/**'
            server:
              - 'server/**'

  # --- Frontend: Vercel (no .vercel file, no linking required) ---
  frontend:
    if: needs.changes.outputs.client == 'true'
    needs: changes
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: vercel-frontend-prod
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      # Optional local build to catch errors early
      - name: Install deps (client)
        run: npm ci
        working-directory: client
      - name: Build (client)
        run: npm run build
        working-directory: client

      # Deploy via Vercel CLI WITHOUT .vercel/project.json.
      # Provide IDs via env and run inside /client.
      - name: Deploy to Vercel (prebuilt)
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }} # required
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }} # team_… or user_…
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} # prj_…
        run: |
          npm i -g vercel@latest
          vercel pull --yes --environment=production \
            --token="$VERCEL_TOKEN" \
            --scope="$VERCEL_ORG_ID" \
            --cwd client
          vercel build --prod \
            --token="$VERCEL_TOKEN" \
            --cwd client
          vercel deploy --prebuilt --prod \
            --token="$VERCEL_TOKEN" \
            --scope="$VERCEL_ORG_ID" \
            --cwd client

  # --- Backend: Render (trigger deploy) ---
  backend:
    if: needs.changes.outputs.server == 'true'
    needs: changes
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: render-backend-prod
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Trigger Render deploy
        run: |
          curl -fsS -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys
